QUILT_REFRESH_ARGS=-p ab
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
KEYBOARD_LAYOUT=English (UK)
LC_MEASUREMENT=en_US.UTF-8
LC_PAPER=en_US.UTF-8
LC_MONETARY=en_US.UTF-8
PI_GEN=pi-gen
_=/usr/bin/printenv
LANG=en_US.UTF-8
APT_PROXY=http://172.17.0.1:3142
DISPLAY=:0
SUDO_GID=1000
OLDPWD=/home/sedzisz/Workspace/work/pi-gen
QUILT_NO_DIFF_INDEX=1
COLORTERM=truecolor
PREV_STAGE=stage0
USERNAME=root
IMG_FILENAME=2020-01-31-Raspbian
SUDO_COMMAND=./build.sh -c cloud-pendrive
QUILT_NO_DIFF_TIMESTAMPS=1
ZIP_FILENAME=image_2020-01-31-Raspbian
ENABLE_SSH=1
BASE_DIR=/home/sedzisz/Workspace/work/pi-gen
LC_NAME=en_US.UTF-8
USER=root
STAGE_DIR=/home/sedzisz/Workspace/work/pi-gen/embeded-lcd
FIRST_USER_NAME=admin
PWD=/home/sedzisz/Workspace/work/pi-gen/embeded-lcd
HOME=/home/sedzisz
CLEAN=1
IMG_DATE=2020-01-31
SUDO_USER=sedzisz
DEPLOY_DIR=/home/sedzisz/Workspace/work/pi-gen/deploy
STAGE_WORK_DIR=/home/sedzisz/Workspace/work/pi-gen/work/2020-01-31-Raspbian/embeded-lcd
FIRST_USER_PASS=raspberry
GIT_HASH=29ef41a31b601739e6497dd8b924d5b898e62ac7
LOCALE_DEFAULT=en_GB.UTF-8
STAGE=embeded-lcd
LC_ADDRESS=en_US.UTF-8
LC_NUMERIC=en_US.UTF-8
LOG_FILE=/home/sedzisz/Workspace/work/pi-gen/work/2020-01-31-Raspbian/build.log
KEYBOARD_KEYMAP=gb
SUDO_UID=1000
PREV_STAGE_DIR=/home/sedzisz/Workspace/work/pi-gen/stage0
MAIL=/var/mail/root
TARGET_HOSTNAME=raspberrypi
TERM=xterm-256color
SHELL=/bin/bash
USE_QEMU=0
TIMEZONE_DEFAULT=Europe/Warsaw
PREV_ROOTFS_DIR=/home/sedzisz/Workspace/work/pi-gen/work/2020-01-31-Raspbian/stage0/rootfs
SCRIPT_DIR=/home/sedzisz/Workspace/work/pi-gen/scripts
SHLVL=2
LANGUAGE=en_US:en
LC_TELEPHONE=en_US.UTF-8
LOGNAME=root
XAUTHORITY=/run/user/1000/gdm/Xauthority
ROOTFS_DIR=/home/sedzisz/Workspace/work/pi-gen/work/2020-01-31-Raspbian/embeded-lcd/rootfs
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
LC_IDENTIFICATION=en_US.UTF-8
IMG_NAME=Raspbian
WORK_DIR=/home/sedzisz/Workspace/work/pi-gen/work/2020-01-31-Raspbian
DEPLOY_ZIP=1
PI_GEN_REPO=https://github.com/RPi-Distro/pi-gen
LC_TIME=en_US.UTF-8
BASH_FUNC_log%%=() {  date +"[%T] $*" | tee -a "${LOG_FILE}"
}
BASH_FUNC_unmount_image%%=() {  sync;
 sleep 1;
 local LOOP_DEVICES;
 LOOP_DEVICES=$(losetup --list | grep "$(basename "${1}")" | cut -f1 -d' ');
 for LOOP_DEV in ${LOOP_DEVICES};
 do
 if [ -n "${LOOP_DEV}" ]; then
 local MOUNTED_DIR;
 MOUNTED_DIR=$(mount | grep "$(basename "${LOOP_DEV}")" | head -n 1 | cut -f 3 -d ' ');
 if [ -n "${MOUNTED_DIR}" ] && [ "${MOUNTED_DIR}" != "/" ]; then
 unmount "$(dirname "${MOUNTED_DIR}")";
 fi;
 sleep 1;
 losetup -d "${LOOP_DEV}";
 fi;
 done
}
BASH_FUNC_update_issue%%=() {  echo -e "Raspberry Pi reference ${IMG_DATE}\nGenerated using ${PI_GEN}, ${PI_GEN_REPO}, ${GIT_HASH}, ${1}" > "${ROOTFS_DIR}/etc/rpi-issue"
}
BASH_FUNC_bootstrap%%=() {  local BOOTSTRAP_CMD=debootstrap;
 local BOOTSTRAP_ARGS=();
 export http_proxy=${APT_PROXY};
 if [ "$(dpkg --print-architecture)" != "armhf" ] && [ "$(dpkg --print-architecture)" != "aarch64" ]; then
 BOOTSTRAP_CMD=qemu-debootstrap;
 fi;
 BOOTSTRAP_ARGS+=(--arch armhf);
 BOOTSTRAP_ARGS+=(--components "main,contrib,non-free");
 BOOTSTRAP_ARGS+=(--keyring "${STAGE_DIR}/files/raspberrypi.gpg");
 BOOTSTRAP_ARGS+=("$@");
 printf -v BOOTSTRAP_STR '%q ' "${BOOTSTRAP_ARGS[@]}";
 setarch linux32 capsh --drop=cap_setfcap -- -c "'${BOOTSTRAP_CMD}' $BOOTSTRAP_STR" || true;
 if [ -d "$2/debootstrap" ]; then
 rmdir "$2/debootstrap";
 fi
}
BASH_FUNC_on_chroot%%=() {  if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/proc)"; then
 mount -t proc proc "${ROOTFS_DIR}/proc";
 fi;
 if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/dev)"; then
 mount --bind /dev "${ROOTFS_DIR}/dev";
 fi;
 if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/dev/pts)"; then
 mount --bind /dev/pts "${ROOTFS_DIR}/dev/pts";
 fi;
 if ! mount | grep -q "$(realpath "${ROOTFS_DIR}"/sys)"; then
 mount --bind /sys "${ROOTFS_DIR}/sys";
 fi;
 setarch linux32 capsh --drop=cap_setfcap "--chroot=${ROOTFS_DIR}/" -- -e "$@"
}
BASH_FUNC_unmount%%=() {  if [ -z "$1" ]; then
 DIR=$PWD;
 else
 DIR=$1;
 fi;
 while mount | grep -q "$DIR"; do
 local LOCS;
 LOCS=$(mount | grep "$DIR" | cut -f 3 -d ' ' | sort -r);
 for loc in $LOCS;
 do
 umount "$loc";
 done;
 done
}
BASH_FUNC_copy_previous%%=() {  if [ ! -d "${PREV_ROOTFS_DIR}" ]; then
 echo "Previous stage rootfs not found";
 false;
 fi;
 mkdir -p "${ROOTFS_DIR}";
 rsync -aHAXx --exclude var/cache/apt/archives "${PREV_ROOTFS_DIR}/" "${ROOTFS_DIR}/"
}
